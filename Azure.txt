1) Infrastructure as a Service (IaaS):
    IaaS in Azure provides virtualized computing resources over the internet. It offers infrastructure services like virtual machines (VMs), storage,   networking, and other resources without the need to manage the underlying hardware.

Key Characteristics:
  Full control over the operating system, applications, and network settings.

  Users are responsible for configuring, managing, and maintaining the operating system, applications, and networking.

  Ideal for workloads requiring custom configurations or where the customer wants to retain control over the infrastructure.

Examples of IaaS in Azure:
   Virtual Machines (VMs)
   Azure Storage
   Virtual Networks (VNet)

Use Cases of IaaS:
   Hosting websites or applications that need full control over their virtual machines.

   Running custom applications with specific infrastructure requirements.

   Extending on-premises infrastructure to the cloud.



Different ways to access and create resources in Azure:

    Azure ARM Template
    Azure Bicep
    Azure Portal
    Terraform



2) Platform as a Service (PaaS)

   PaaS in Azure provides a complete platform for developing, running, and managing applications without having to worry about underlying infrastructure or operating systems.

Key Characteristics:
  The cloud provider manages the underlying infrastructure, operating system, and runtime environment.

  Developers can focus on building and deploying applications, using built-in tools for application management, scaling, and monitoring.

  PaaS is ideal for developing, testing, and deploying web applications without the need to manage infrastructure or hardware.

Examples of PaaS in Azure:
    Azure App Services (Web Apps)
    Azure SQL Database
    Azure Functions

Use Cases of PaaS:
   Developing and deploying web or mobile applications.

   Building microservices-based architectures using Azure Functions or Azure Kubernetes Service.

   Managing database and application backend services with minimal administrative overhead.




3) Software as a Service (SaaS)

   SaaS in Azure delivers fully managed software applications over the internet. SaaS users access these applications via a web browser without worrying about managing or maintaining the infrastructure or platform.

Key Characteristics:
   The service provider manages everything, including infrastructure, platform, and software updates.

   SaaS applications are ready to use with no installation required.

   Ideal for end-users or businesses who need a ready-to-use application for specific tasks.

Examples of SaaS in Azure:
    Office 365
    Microsoft Teams
    Azure DevOps

Use Cases of SaaS:
   Using productivity tools like Office 365 for team collaboration and document management.

   Using Microsoft Teams for communication and file sharing across organizations.

   Managing development workflows through Azure DevOps for continuous integration/continuous deployment (CI/CD).




Strategy- it is long term
Tactics - it is Short term steps taken to solve Non Functional Requirements



Azure Web App:
Azure Web App is a fully managed platform for building, deploying, and scaling web apps. Azure Web Apps is a part of Azure App Service and provides a platform to host web applications, REST APIs, and mobile backends. Some key features:

   Automatic scaling and load balancing.

   Integration with databases and storage solutions.

   Support for multiple languages such as .NET, Java, Python, Node.js, and more.




------------------Security Concerns in IaaS, PaaS, and SaaS
IaaS Security Risks:

IaaS exposes more of the infrastructure to users, which means managing the operating system, applications, and network security is the user's responsibility.

Common Attacks:

  Data breaches

  Denial-of-service (DoS) attacks

  Vulnerabilities in virtual machine configurations

PaaS Security Risks:

In PaaS, security is shared between the cloud provider and the customer. While the cloud provider manages the infrastructure, the customer needs to focus on securing their application and data.

Common Attacks:

  Misconfiguration vulnerabilities

  Insufficient authentication and authorization

  API security risks

SaaS Security Risks:

SaaS models have the least amount of user control, as the application is fully managed by the provider. However, there are still potential security concerns related to user data and access management.

Common Attacks:

  Data leakage

  Account hijacking

  Service interruptions due to cyberattacks





Functional Requirements (FR):
Functional requirements specify what a system should do. They describe the specific behaviors, actions, or functions the system must have to meet the needs of its users. Essentially, functional requirements define the capabilities of the system.

    User Management: The system must allow administrators to create, edit, or delete user accounts.

    Data Retrieval: The system must be able to retrieve and display a list of products from the database.

Characteristics of Functional Requirements:
    Focus on specific actions or operations of the system.

    Can be expressed as user stories or use cases.

    Directly related to the system's core functionality.





Non-Functional Requirements (NFR):
Non-functional requirements specify how a system performs its functions. They define the quality attributes and operational aspects of the system, such as its performance, scalability, security, and availability. These requirements help ensure the system works effectively and meets the users' expectations in terms of system qualities.

Examples of Non-Functional Requirements:
    Performance: The system must handle 1000 concurrent users without degradation in speed.

    Scalability: The system must be able to scale horizontally to support a growing number of users.

    Availability: The system must have 99.9% uptime.

    Security: The system must encrypt sensitive user data using AES-256 encryption.

    Usability: The systemâ€™s user interface must be simple and intuitive for new users.

Characteristics of Non-Functional Requirements:
    Focus on system quality and performance.

    Often more general and can apply across multiple features or parts of the system.

    Can be measured or quantified (e.g., performance benchmarks, security standards).




Compile-Time Caching: This helps speed up the build process, particularly when dealing with large data or images.

Runtime Caching: Helps to reduce latency by storing frequently used data.




Alpine Linux is a security-focused, lightweight Linux distribution. Alpine is commonly used in Docker images because it is minimal, meaning it has a small footprint, which is ideal for containerized applications.

Benefits of Alpine Image:

   Small size (~5 MB).

   Minimal attack surface.
   
   Network




Kubernetes supports multiple scaling strategies for applications:

Horizontal Scaling (Horizontal Pod Autoscaling):

    Involves adding or removing instances (pods) of an application based on metrics like CPU or memory usage.

Vertical Scaling (Vertical Pod Autoscaling):

    Involves adjusting the resources (CPU, memory) allocated to a pod to meet demand.

Cluster Scaling:

    Involves adding or removing nodes (virtual machines) to the Kubernetes cluster based on the workload.




Bastion Host:
A Bastion Host is a server that acts as a gateway between a private network and the public internet. It is used to securely access servers in a private network (e.g., in a VNet). Bastion Hosts are configured with limited access and hardened security to minimize risk.




VNet (Azure): A VNet in Azure is a private network that allows communication between resources such as VMs, databases, and storage within the cloud.



Region: A geographical area containing multiple data centers. Azure regions are large geographic locations, and each region consists of multiple Availability Zones.

Availability Zones: These are physically separate locations within a region, designed to provide high availability by isolating failures and ensuring services continue running.

Zones: These refer to the individual fault-tolerant locations within a region.




Deployment Models:
   Deployment models describe how resources are distributed in the cloud:

   Public Cloud: Resources are shared across multiple organizations.

   Private Cloud: Resources are used exclusively by one organization.

   Hybrid Cloud: A mix of both private and public cloud resources.



Express Gateways:
    An Express Gateway in Azure connects on-premises networks to the Azure cloud via a dedicated private connection. ExpressRoute provides more reliability, speed, and security than traditional internet connections.



VNet/VPC Peering:
VNet/VPC Peering allows virtual networks to connect to each other and share resources. It is typically used when resources are distributed across multiple VNets.

Key Requirement: The IP address ranges of the peered VNets must be different to avoid conflicts.

Advantages of Peering:

    Cost-Effective: Without peering, transferring data between VNets requires using public IPs or VPNs, which can be costly.

    Security: Peering allows for private, secure connections between VNets.

    Reduced Latency: Communication within peered networks is faster since it avoids the public internet.




Azure Services: Creation and Scaling
Azure Subscription & Resource Groups: Subscriptions are containers for billing and resource management. Resource groups help organize and manage resources.

VM Scale Sets: Automatically scale VM instances based on demand. It integrates with Azure Load Balancer for distributing traffic across instances.

Availability Sets: Distributes VMs across fault domains, ensuring that at least one instance of a VM remains available in case of hardware failure.



to create networks we need cidr 
we have three 
32-42=8 ---> 2^8---> 255
10.0.0.0/24 ---> 10.0.0.0--- 10.0.0.255

network--        1    2    4     8     16     32     64    128      256
host--           256  128  64    32     16    8      4      2        1
subnet mask--    /24  /25  /26   /27   /28    /29   /30     /31      /32


we are dividing these into 4 ways: 10.0.0.0
TEAMS     ip range                      newtwork id              boardcast id                   cidr

A---  10.0.0.1---10.0.0.62               10.0.0.0                 10.0.0.63                   10.0.0.0/26      

B---  10.0.0.65---10.0.0.126             10.0.0.64                10.0.0.127                  10.0.0.64/26 

C---  10.0.0.129---10.0.0.190            10.0.0.128               10.0.0.191                  10.0.0.128/26 




In this setup, you're organizing a virtual network in Azure with proper subnetting and access control using Network Security Groups (NSGs).

1. Virtual Network (VNet):  
   - Acts like a container for your entire cloud network setup.  

2. Subnets:  
   - You divided the VNet into three logical parts (subnets):  
     - rohith-frontend: For frontend services (like web apps).  
     - rohith-backend: For backend services (like APIs, databases).  
     - rohith-private: For internal/secure systems (not publicly accessible).  

3. Virtual Machines (VMs):  
   - You created one VM inside each subnet with matching names. This keeps the setup clear and organized.

4. Network Security Groups (NSGs):  
   - By default, Azure assigns a security group â€” you **removed these defaults**.  
   - You created your own NSGs:
     - rohith-public: Used for both frontend and backend VMs â€” allows controlled public access.
     - rohith-private: Used for the private VM â€” restricts it to private/internal access only.


1. **Created a Virtual Network (VNet)**

2. **Subnets Created:**
   - `rohith-frontend`
   - `rohith-backend`
   - `rohith-private`

3. Virtual Machines Created:
   - One VM per subnet with the same name:
     - rohith-frontend VM
     - rohith-backend VM
     - rohith-private VM

4. Network Security Groups (NSGs):
   - Removed default NSGs from all VMs.
   - Created custom NSGs:
     - `rohith-public`: Assigned to `rohith-frontend` and `rohith-backend` subnets.
     - `rohith-private`: Assigned to `rohith-private` subnet.

After creating new NSGs add rules to the public and private NSGs, In public add the inbound rule and allow ssh with priotiy 150 and In private allow the backend ip address with 105 priority and then deny with priority with 110.
then we can access front to backend vm and then backend to private but we cannot access frontend to private.


24/04/2025:
What is an Edge Location?

An Edge Location is a small data center closer to the end-users that is part of a Content Delivery Network (CDN). In AWS, this is most commonly associated with Amazon CloudFront.

Think of it like this:

Instead of sending your data all the way from a central server (which could be far away), you deliver it from a nearby edge location for faster access.



ğŸ”¹ Where is it Located?

Edge locations are distributed all around the worldâ€”in major cities and populated areas. These locations are chosen to reduce latency by being physically closer to users. AWS, for example, has hundreds of edge locations across:

North America
Europe
Asia-Pacific
South America
Africa
Middle East

You can check the latest list of AWS edge locations here:
ğŸ‘‰ https://aws.amazon.com/cloudfront/features/#Edge_Locations



ğŸ”¹ How Does It Help in Live Streaming?

Edge locations play a huge role in improving the quality and speed of live streaming. Here's how:

âœ… 1. Lower Latency

Content (like video streams) is delivered from the closest possible location to the viewer.
This means less buffering and faster start times.

âœ… 2. Scalability

CDNs with edge locations can handle millions of viewers simultaneously by distributing traffic across locations.

âœ… 3. High Availability

Even if one server goes down, other nearby edge locations can serve the content, ensuring no interruption.

âœ… 4. Optimized Bandwidth

Edge locations cache content so the origin server isn't overloaded.



ğŸ”¹ Example in Real Life

Suppose you're streaming a live cricket match hosted from Mumbai. Viewers in:

Hyderabad get the feed from a Hyderabad edge location
Delhi users are served from a Delhi edge location
New York viewers get it from a nearby U.S. edge location

This way, everyone gets the stream quickly and smoothly.

Here we created new user account from the main account. how to create user account:
    click on entra id and click on add then click create newuser
    the enter then mail id and user name and the password 
    In assignment section add group named azuregroup and then create
After use can use the new user account and create virtual machine, etc..



Vnet peering:

here we need to create two vnet using commands:

     az network vnet create --resource-group <resource_group_name> --name <vnet_name> --address-prefixes <ad>

Then create two subnets:

     az network vnet subnet create \
  --resource-group <resource_group_name> \
  --vnet-name <vnet_name> \
  --name <subnet_name> \
  --address-prefix <subnet_prefix>

Then create VMs:
   az vm create \
 --resource-group <resource_group_name> \
 --name <vm_name> \
 --location <location> \
 --image <vm_image> \
 --vnet-name <vnet_name> \
 --subnet <subnet_name> \
 --admin-username <admin_username> \
 --admin-password <admin_password>

After creating vm allow icmp protocal for both vm1 and vm2 
then check using ping

Then create peering between two vnets using the command:

# Peering from VNet-2 to VNet-1
az network vnet peering create \
  --name peer-vnet2-to-vnet1 \
  --resource-group myResourceGroup \
  --vnet-name myVNet2 \
  --remote-vnet myVNet1 \
  --allow-vnet-access

# Peering from VNet-1 to VNet-2
az network vnet peering create \
  --name peer-vnet1-to-vnet2 \
  --resource-group myResourceGroup \
  --vnet-name myVNet1 \
  --remote-vnet myVNet2 \
  --allow-vnet-access


SSH into One of the VMs and the check the ping using another vm private ip address viceversa..




Then create new user account without adding group to it and create.
 
Then open main account and give the role in subscription like reader or contributor and check weather it is working in newly created user account when we give reader role it does not have any access to modify or delete. when you change it to contributor you can delete and modify.

Then create new user account and give the roles in resource group to new user account same vicevers..



Account
  --tenant means isolated space
  --management group
  --subscriptions these are associated to payment
  --resource groups
  --resources



az login
az --version
az account list
az account list --output table
az config set defaults.group="pradhisha-rg"
az account set --subscription "bf7e75db-e819-49ca-b6d2-69c32a2353fe"
az group list --help
az group list --query "[?location=='centralindia']"
az group list --query "[?name=='pradhisha-rg']"
az group list --query "[].name" --output tsv
az vm list
az config get defaults
az vm list -g Admin-Azure
az vm list -g Admin-Azure --query "[].name" --output tsv
az vm list -g Admin-Azure --query "[].{Name:name}" --output tsv
az vm list -g Admin-Azure --query "[].{Name:name, ResourceGroup:resourceGroup}" --output tsv
az storage account list -g resourcegroupname
env | grep -i storage
az vm list-skus --location centralindia --query "[?starts_with(name,'Standard_DS')]" --output table
az storage account list --query "[?location=="centralindia"]"





roles
--identity
--users
--groups
--service principles



IAC-Infrastructure as a code
ğŸ¡ªManaging infrastructure with code instead of manual work.
Why do we need IaC?
Consistency: No human mistakes â€” everything is scripted.
Speed: Set up entire environments (dev, test, prod) in minutes.
Version Control: Store infrastructure code in Git â€” rollback or track changes easily.
Automation: Integrate infrastructure into CI/CD pipelines.
Scalability: Quickly create or destroy hundreds of resources when needed.
IaC mainly has three categories:
1.Infrastructure Provisioning Tools:
Used to provision (create, modify, sometimes destroy) infrastructure resources like VMs, databases, networks, etc.
Terraform (multicloud â€“ AWS, Azure, GCP)
AWS CloudFormation (AWS native, YAML/JSON templates)
AWS Boto (Python SDK to automate AWS)
Azure ARM templates (JSON format templates for Azure)
Azure Bicep (Simpler syntax than ARM, Azure specific)
 
2. Configuration Management Tools:
Used to upgrade, patch, or modify existing servers without deleting them.
Examples:
Ansible (push-based)
Puppet (pull-based)
Chef (pull-based)
3. Server Templating Tools:
   Help create pre-built server environments to save time.
  Examples:
Vagrant â†’ Creates and manages Virtual Machines easily (for dev/test environments).
Docker â†’ Creates and manages lightweight Containers (package apps + environment together).
 
TERRAFORM:
ğŸ¡ªopen-source Infrastructure as Code (IaC) tool by HashiCorp.
ğŸ¡ªIt creates, changes, and manages Cloud infrastructure.
Providers in Terraform?
Providers are plugins that let Terraform talk to a specific platform (AWS, Azure, Kubernetes, GitHub, etc.)
Examples:
aws provider â†’ For creating EC2, S3 in AWS.
azurerm provider â†’ For creating resources in Azure.
google provider â†’ For GCP.
 
In .tf file, you define a provider like this:
provider "aws" {
 region = "us-east-1"
}

Terraform downloads providers automatically when you run terraform init.
Terraform init:
ğŸ¡ª  First command you must run inside a Terraform project folder.
ğŸ¡ª  It initializes the working directory:
Downloads providers (AWS, Azure, etc.)
Prepares Terraform backend (if you have remote state like S3)
Checks modules
terraform plan:
Checks your Terraform code and shows what will happen without actually doing it.
It creates an execution plan.
Helps you review the changes before making real updates.
Terraform Apply:
Executes the plan and makes real changes to the infrastructure.
Actually creates, updates, or deletes resources in cloud platforms.
It asks for confirmation (unless you pass -auto-approve).
After apply, your cloud infra matches your .tf code.
It compares:
Desired state (from .tf files)
Current state (from terraform.tfstate file)
Shows a preview:
What will be created
What will be modified
What will be destroyed
Terraform is Stateful
Terraform tracks what infrastructure it created in a state file (terraform.tfstate).
Without the state, Terraform wonâ€™t know:
What resources exist?
What was created by Terraform?
What needs updating or destroying?
The terraform.tfstate file must be stored safely (sometimes in cloud storage like AWS S3 with locking).
 


What is terraform.lock.hcl File?
Terraform 0.14+ automatically creates a terraform.lock.hcl file.
It locks provider versions for your project.
Guarantees consistent behavior when multiple people work on the same project.
Example:
If your project tested with AWS provider version 5.10.0, the lock file remembers it. Even if a newer AWS provider 5.11.0 releases tomorrow, your project still uses 5.10.0.
 Prevents unexpected changes due to provider upgrades.
 

What is .tf File in Terraform?
.tf files are Terraform configuration files where you write the instructions for infrastructure.
These files describe what you want (servers, databases, networking, etc.).

Create vm using terraform:


provider "azurerm" {
  features {}
}

# Define the resource group
resource "azurerm_resource_group" "example" {
  name     = "rohith-rg"
  location = "East US"
}

# Define the virtual network
resource "azurerm_virtual_network" "example" {
  name                = "rohith-vnet-2"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
  address_space       = ["10.0.0.0/16"]
}

# Define the subnet
resource "azurerm_subnet" "example" {
  name                 = "backend-subnet"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.1.0/24"]
}

# Define the Network Interface Card (NIC)
resource "azurerm_network_interface" "example" {
  name                = "rohith-nic"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example.id
    private_ip_address_allocation = "Dynamic"
  }

  tags = {
    environment = "backend"
  }
}

# Define the VM
resource "azurerm_linux_virtual_machine" "example" {
  name                = "rohith-backend-vm"
  resource_group_name = azurerm_resource_group.example.name
  location            = azurerm_resource_group.example.location
  size                = "Standard_B1s"
  admin_username      = "azureuser"

  os_disk {
    name                 = "rohith-backend-os-disk"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
    disk_size_gb         = 20
  }

  admin_ssh_key {
    username   = "azureuser"
    public_key = file("~/.ssh/id_rsa.pub") # You can generate a new SSH key if needed
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "22.04-LTS"
    version   = "latest"
  }

  network_interface_ids = [azurerm_network_interface.example.id]

  tags = {
    environment = "backend"
  }
}

terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "2.40.0"
    }
  }
}





































